* TODO Remove commented out code
* TODO Verification Plan 

Problem has oracle problem (Justify)


- economnics of v erification
I use a two step approach

- For pure N-Queens, I just count solutions (Compare with :
  http://oeis.org/A000170 as my oracle)

- For N-Queens-3-Line ...
    - filter approach: first run normal N-queens and then filter out all solutions with
      3Lines. Compare with approach which does not generate 3Lines at all.

    - Visual inspection of simple cases for correctness.
* DONE Verification step 1: get N-Queens verified
* DONE Verification step 2: get N-Queens-3-Line verified
* DONE Clean up tests, automante
* TODO check input parameters
no crazy validation (why)
* DONE Write tests
* TODO Write help, version etc
* TODO Clean .gitignore
* TODO Apply code formatting tool
* TODO Write narrative

(1) I set myself a time budget of 6 hours to complete this challenge.
Since I have never used Gradle before, and never written a non-trivial
Java program, most of the time will be spent fixing trivial Gradle and
Java issues, I don't really have much time for optimisaitions.

(2) N-Queens is NP-complete, and I conjecture that so is
N-Queens-3-Line.

(3) Test oracle is a problem.

(4) No sophisticated error handling
* TODO Make nice git mcomments
* DONE Upload to Github, private repo
* TODO Invite Compilerworks people
* TODO Make nice gradle usability
* TODO Make basic README.md
* TODO Command line options
I want the following
- n
- lo hi
- visualise
- help
- version
* TODO make notes on what I want to achieve
* TODO Basic error handling 
