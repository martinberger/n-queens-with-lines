* DONE Make note about code comments
* DONE remove irrelevantr includes
* DONE Remove commented out code
* DONE Verification Plan 

Problem has oracle problem (Justify)


- economnics of v erification
I use a two step approach

- For pure N-Queens, I just count solutions (Compare with :
  http://oeis.org/A000170 as my oracle)

- For N-Queens-3-Line ...
    - filter approach: first run normal N-queens and then filter out all solutions with
      3Lines. Compare with approach which does not generate 3Lines at all.

    - Visual inspection of simple cases for correctness.
* DONE Verification step 1: get N-Queens verified
* DONE Verification step 2: get N-Queens-3-Line verified
* DONE Clean up tests, automante
* DONE Upload to Github, private repo
* DONE check input parameters
no crazy validation (why)
* DONE Write tests
* DONE Write help, version etc
* DONE Clean .gitignore
* DONE Apply code formatting tool
* DONE Write narrative

(1) I set myself a time budget of 6 hours to complete this challenge.
Since I have never used Gradle before, and never written a non-trivial
Java program, most of the time will be spent fixing trivial Gradle and
Java issues, I don't really have much time for optimisaitions.

(2) N-Queens is NP-complete, and I conjecture that so is
N-Queens-3-Line.

(3) Test oracle is a problem.

(4) No sophisticated error handling
* DONE Make nice git mcomments
* DONE Upload to Github, private repo
* DONE Invite Compilerworks people
* DONE Make nice gradle usability
* DONE Make basic README.md
* DONE Command line options
I want the following
- n
- lo hi
- visualise
- help
- version
* DONE make notes on what I want to achieve
* DONE Basic error handling 
* DONE Unify Boolean and boolean
* DONE Switch on pedantic warning / error checking
Sat 17 Oct 2020 22:04:39 BST
Sat 17 Oct 2020 22:17:38 BST
* DONE -n 15  takes about 2 minutes

-n 16 takes about 13 minutes
Sat 17 Oct 2020 22:04:39 BST
Sat 17 Oct 2020 22:17:38 BST
